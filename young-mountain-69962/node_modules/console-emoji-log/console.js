(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Utils = {}));
})(this, (function (exports) { 'use strict';

  var getCSSText = function (color) { return ["font-size: 11px;", ("color: " + color + ";")]; };
  var emoji = {
    log: "\u26aa\ufe0f",
    info: "\ud83d\udd35",
    warn: "\u26a0\ufe0f",
    warn: "\ud83d\udfe1",
    error: "\ud83d\udd34",
    success: "\u2705",
  };

  var Console = function Console(config) {
    this.config = Object.assign(
      {
        useEmoji: true,
        prefix: "=>",
        // emoji: {}
      },
      config || {}
    );
    this.config.emoji = Object.assign({}, emoji, (config || {}).emoji);
  };

  Console.prototype.setConfig = function setConfig (options) {
    this.config = Object.assign({}, this.config, options || {});
    this.config.emoji = Object.assign({}, emoji, this.config.emoji || {});
  };

  Console.prototype._getPrefix = function _getPrefix (emojiType) {
    return ("%c" + (this.config.useEmoji ? this.config.emoji[emojiType] : "") + "%c" + (this.config.prefix ? " " + this.config.prefix : ""));
  };

  Console.prototype.log = function log () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    console.log.apply(console, [ this._getPrefix("log") ].concat( getCSSText("#000000"), args ));
  };

  Console.prototype.info = function info () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    console.log.apply(console, [ this._getPrefix("info") ].concat( getCSSText("#409EFF"), args ));
  };

  Console.prototype.warn = function warn () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    console.log.apply(console, [ this._getPrefix("warn") ].concat( getCSSText("#E6A23C"), args ));
  };

  Console.prototype.error = function error () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    console.log.apply(console, [ this._getPrefix("error") ].concat( getCSSText("#ff0000"), args ));
  };

  Console.prototype.success = function success () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    console.log.apply(console, [ this._getPrefix("success") ].concat( getCSSText("#67C23A"), args ));
  };

  var instance = new Console();

  module.exports = instance;

  exports.Console = Console;
  exports["default"] = instance;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
